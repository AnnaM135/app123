{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["multipleLang","en","head","title","ru","am","App","props","useState","lang","setLang","className","onChange","e","target","value","defaultValue","map","item","messages","locale","id","defaultMessage","year","month","day","weekday","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OA+DMA,EAAe,CACnBC,GAAI,CACFC,KAAM,kBACNC,MAAO,iBAETC,GAAI,CACFF,KAAM,kBACNC,MAAO,iBAETE,GAAI,CACFH,KAAM,8FACNC,MAAO,oIA6CIG,MAxCf,SAAaC,GACX,MAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQC,SAAU,SAACC,GAAD,OAAOH,EAAQG,EAAEC,OAAOC,QAAQC,aAAcP,EAAhE,SAEI,CAAC,KAAM,KAAM,MAAMQ,KAAI,SAAAC,GAAI,OACzB,iCAAoBA,GAAPA,QAKnB,eAAC,IAAD,CAAcC,SAAYnB,EAAaS,GAAOW,OAAUX,EAAxD,UACE,4BACE,cAAC,IAAD,CAAkBY,GAAG,OACpBC,eAAiB,eACjBP,MAAON,MAIV,uBACA,4BACE,cAAC,IAAD,CAAkBY,GAAG,QACpBC,eAAiB,eACjBP,MAAON,MAIV,cAAC,IAAD,CACAM,MAASR,EAAMQ,MACfQ,KAAK,UACLC,MAAM,OACNC,IAAI,UACJC,QAAQ,gBCpGDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.aaf33450.chunk.js","sourcesContent":["// import React, {useState} from 'react';\n// import './App.css';\n// import { IntlProvider, FormattedMessage, FormattedDate } from \"react-intl\";\n\n// const messages = {\n//   en: {\n//      heading: \"Welcome\",\n//      subheading: \"Your page\",\n//      title: \"lorem text\"\n//   },\n//   ru: {\n//     heading: \"ruseren\",\n//     subheading: \"ruseren Your page\",\n//     title: \"ruseren lorem text\"\n//   }\n// }\n\n// function App(props) {\n//   const [locale, setLocale] = useState('en');\n\n//   const handelChange = (e) => {\n//     setLocale(e.target.value)\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <select onChange = {handelChange} defaultValue={locale}>\n//         {\n//           ['en', 'ru'].map((x) =>{\n//             return(\n//               <option key = {x}>{x}</option>\n//             )\n//           })\n//         }\n//       </select>\n\n//       <IntlProvider locale = {locale} messages={messages[locale]}>\n//         <p>\n//           <FormattedMessage id=\"heading\" defaultMessage='some default text here' value={{locale}}></FormattedMessage>\n//         </p>\n//         <br/>\n//         <p>\n//           <FormattedMessage id=\"subheading\" defaultMessage='some default text here'></FormattedMessage>\n//         </p>\n//         <p>\n//           <FormattedMessage id=\"title\" defaultMessage='some default text here' value={{channelName:\"ForCode\"}}></FormattedMessage>\n//         </p>\n//         <FormattedDate value={props.date} year='numeric' month='long' day='numeric' weekday='long'></FormattedDate>\n//       </IntlProvider>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n\nimport React, { useState } from 'react'\nimport { IntlProvider, FormattedMessage, FormattedDate } from \"react-intl\"\nimport \"./App.css\"\n\nconst multipleLang = {\n  en: {\n    head: \"ENGLISH HEADING\",\n    title: \"ENGLISH TITLE\"\n  },\n  ru: {\n    head: \"RUSSIAN HEADING\",\n    title: \"RUSSIAN TITLE\"\n  },\n  am: {\n    head: \"Հայերեն Վերնագիր\",\n    title: \"Հայերեն նախադասություն\"\n  }\n}\n\n\nfunction App(props) {\n  const [lang, setLang] = useState('en')\n  return (\n    <div className=\"App\">\n      <select onChange={(e) => setLang(e.target.value)} defaultValue={lang}>\n        {\n          ['en', 'ru', 'am'].map(item => (\n            <option key={item}>{item}</option>\n          ))\n        }\n      </select>\n\n      <IntlProvider messages = {multipleLang[lang]} locale = {lang}>\n        <p>\n          <FormattedMessage id=\"head\"\n           defaultMessage = \"Some TEXT...\"\n           value={lang}>\n\n          </FormattedMessage>\n        </p>\n        <br />\n        <p>\n          <FormattedMessage id=\"title\"\n           defaultMessage = \"Some TEXT...\"\n           value={lang}>\n\n          </FormattedMessage>\n        </p>\n        <FormattedDate \n        value = {props.value}\n        year=\"numeric\"\n        month=\"long\"\n        day=\"numeric\"\n        weekday=\"long\"></FormattedDate>\n      </IntlProvider>\n\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}